#!/usr/bin/env bats
# tests/test_aws/test_scripts/test_news_queue.bats
#
# NOTE: This test suite was generated by GPT-5 and reviewed/checked by Dor Fuchs.
#
# Focus: black-box tests for news_queue.sh via stubbed deps (no network).
# - Stubs: aws, zcat, python3, uuidgen, s3_utils.sh, validation.sh.
# - Verifies: month skipping for 2016, strict vs non-strict missing months,
#             default output-prefix, flag errors, and per-month sampling calls.
#
# Requires: bats-core, bats-support, bats-assert, bats-file
bats_require_minimum_version 1.5.0

# ----- Load libraries (works on macOS/Homebrew and CI) -----------------------
BATS_PREFIX="${BATS_PREFIX:-$(command -v brew >/dev/null 2>&1 && brew --prefix || echo /usr/local)}"
if [[ -f "${BATS_PREFIX}/lib/bats-support/load.bash" ]]; then
  load "${BATS_PREFIX}/lib/bats-support/load.bash"
  load "${BATS_PREFIX}/lib/bats-assert/load.bash"
  load "${BATS_PREFIX}/lib/bats-file/load.bash"
else
  load 'bats-support/load.bash'
  load 'bats-assert/load.bash'
  load 'bats-file/load.bash'
fi
# ----------------------------------------------------------------------------

setup_file() {
  local default_src="aws/scripts/news_queue.sh"
  NEWS_QUEUE_SRC="${NEWS_QUEUE_SRC:-$default_src}"

  FIXDIR="${BATS_FILE_TMPDIR}/news_queue_fixture"
  mkdir -p "$FIXDIR"

  if [[ ! -f "$NEWS_QUEUE_SRC" ]]; then
    echo "news_queue.sh not found at: $NEWS_QUEUE_SRC" >&2
    echo "Set NEWS_QUEUE_SRC to your file path before running." >&2
    NEWS_QUEUE_MISSING=1
    export NEWS_QUEUE_MISSING
    return 0
  fi

  cp "$NEWS_QUEUE_SRC" "$FIXDIR/news_queue.sh"

  # We'll put stubs next to the script (so $(dirname "$0") resolves to them)
  # and also provide CLI shims via a bin dir prepended to PATH.
  BIN="$FIXDIR/bin"
  mkdir -p "$BIN"

  CALL_LOG="$FIXDIR/calls.log"      # human-readable sequence of calls
  UPLOAD_LOG="$FIXDIR/uploads.log"  # payloads that were "uploaded"
  : >"$CALL_LOG"
  : >"$UPLOAD_LOG"

  # ------------------ Stub: s3_utils.sh (next to script) --------------------
  # - parse_s3_uri: logs and splits into PARSED_BUCKET/KEY.
  # - check_object_access:
  #     * For commoncrawl warc.paths.gz: consult AVAILABLE_WARC env (comma list of YYYY-MM).
  #     * For destination warc_queue.txt: always 0 unless QUEUE_RC=1.
  cat >"$FIXDIR/s3_utils.sh" <<'S3UTILS'
#!/usr/bin/env bash
parse_s3_uri() {
  local uri="$1"
  echo "parse_s3_uri $uri" >>"$CALL_LOG"
  if [[ "$uri" =~ ^s3://([^/]+)/(.+)$ ]]; then
    PARSED_BUCKET="${BASH_REMATCH[1]}"
    PARSED_KEY="${BASH_REMATCH[2]}"
    return 0
  else
    echo "invalid S3 URI (expected s3://bucket/key): $uri"
    return 1
  fi
}

check_object_access() {
  local bucket="$1" key="$2"
  echo "check_object_access $bucket $key" >>"$CALL_LOG"

  # commoncrawl CC-NEWS manifests
  if [[ "$bucket" == "commoncrawl" && "$key" =~ CC-NEWS/([0-9]{4})/([0-9]{2})/warc\.paths\.gz$ ]]; then
    local y="${BASH_REMATCH[1]}" m="${BASH_REMATCH[2]}"
    if [[ ",${AVAILABLE_WARC:-}," == *,"$y-$m",* ]]; then
      return 0
    else
      echo "Output file $key does not exist or is not accessible."
      return 1
    fi
  fi

  # Destination queues (warc_queue.txt)
  if [[ "$key" =~ /[0-9]{2}/warc_queue\.txt$ ]]; then
    if [[ "${QUEUE_RC:-0}" -eq 0 ]]; then
      return 0
    else
      echo "Output file $key does not exist or is not accessible."
      return 1
    fi
  fi

  # default: allow
  return 0
}
S3UTILS
  chmod +x "$FIXDIR/s3_utils.sh"

  # ------------------ Stub: validation.sh (next to script) ------------------
  # Minimal versions to satisfy option parsing; messages mimic your real ones.
  cat >"$FIXDIR/validation.sh" <<'VALID'
#!/usr/bin/env bash
die(){ echo "$1" >&2; exit 1; }

validate_arg(){ local flag="$1" val="$2"; if [[ -z "$val" || "$val" == -* ]]; then die "Missing value for $flag"; fi; }
validate_year(){ local y="$1"; [[ -z "$y" ]] && die "Year is required."; [[ "$y" =~ ^[0-9]{4}$ ]] || die "Year must be a four-digit number."; }
validate_positive_integer(){ local n="$1"; ([[ "$n" =~ ^[0-9]+$ ]] && [[ $n -gt 0 ]]) || die "Daily cap must be a positive integer."; }
# Only shape check for this suite; avoids network checks.
validate_s3_output_prefix(){
  local uri="$1"
  [[ "$uri" =~ ^s3://[^/]+/.+/$ ]] || die "output must be a prefix ending with '/': $uri"
}
VALID
  chmod +x "$FIXDIR/validation.sh"

  # ------------------ CLI shims in $BIN (PATH-prepended) --------------------

  # aws: log cp calls. For "aws s3 cp - s3://.../warc_queue.txt" read stdin, log dest+payload.
  cat >"$BIN/aws" <<'AWS'
#!/usr/bin/env bash
echo "aws $*" >>"$CALL_LOG"
if [[ "$1" == "s3" && "$2" == "cp" ]]; then
  # commoncrawl -> '-' : just consume stdin (we output via zcat stub)
  if [[ "$3" == s3://commoncrawl/* && "$4" == "-" ]]; then
    exit 0
  fi
  # '-' -> s3://.../warc_queue.txt : capture payload and log it
  if [[ "$3" == "-" && "$4" =~ ^s3://.+/[0-9]{2}/warc_queue\.txt$ ]]; then
    payload="$(cat)"
    echo "UPLOAD $4 <<EOF" >>"$UPLOAD_LOG"
    printf "%s\n" "$payload" >>"$UPLOAD_LOG"
    echo "EOF" >>"$UPLOAD_LOG"
    exit 0
  fi
fi
# default ok for this suite
exit 0
AWS
  chmod +x "$BIN/aws"

  # zcat: ignore input, emit lines controlled by ZCAT_LINES or a default.
  cat >"$BIN/zcat" <<'ZC'
#!/usr/bin/env bash
if [[ -n "${ZCAT_LINES:-}" ]]; then
  printf "%b" "$ZCAT_LINES"
else
  printf "pathA\npathB\n"
fi
ZC
  chmod +x "$BIN/zcat"

  # python3: simulate monthly sampler. Fails if MONTH is in FAIL_MONTHS (space/comma separated)
  cat >"$BIN/python3" <<'PY'
#!/usr/bin/env bash
echo "python3 $*" >>"$CALL_LOG"
if [[ "$1" == "-u" && "$2" == "monthly_uniform_sampling.py" ]]; then
  # args: bucket key year month cap
  year="$5"; month="$6"
  # Accept both "02 03" or "02,03" styles
  fm="${FAIL_MONTHS:-}"
  fm="${fm//,/ }"
  for m in $fm; do
    if [[ "$m" == "$month" ]]; then
      exit 1
    fi
  done
  exit 0
fi
exit 0
PY
  chmod +x "$BIN/python3"

  # uuidgen: deterministic
  cat >"$BIN/uuidgen" <<'UG'
#!/usr/bin/env bash
echo "TEST-RUN-ID"
UG
  chmod +x "$BIN/uuidgen"

  export FIXDIR BIN CALL_LOG UPLOAD_LOG
}

setup() {
  [[ "${NEWS_QUEUE_MISSING:-0}" == 1 ]] && skip "news_queue.sh missing; set NEWS_QUEUE_SRC and rerun"

  : >"$CALL_LOG"
  : >"$UPLOAD_LOG"
  export PATH="$BIN:$PATH"

  export SCRIPT_PATH="$FIXDIR/news_queue.sh"

  # >>> Pin Bash 5 from Homebrew <<<
  if command -v brew >/dev/null 2>&1; then
    HB="$(brew --prefix)"
    BASH_FOR_SCRIPT="$HB/bin/bash"
    [[ -x "$BASH_FOR_SCRIPT" ]] || BASH_FOR_SCRIPT="$(command -v bash)"
  else
    BASH_FOR_SCRIPT="$(command -v bash)"
  fi
  export BASH_FOR_SCRIPT

  cd "$FIXDIR" || exit
}

_run_script() {
  run --separate-stderr "$BASH_FOR_SCRIPT" "$SCRIPT_PATH" "$@"
}

# --------------------------------- Tests -------------------------------------

@test "--help prints usage and exits 0" {
  _run_script --help
  assert_success
  assert_line --partial "Usage:"
  assert_line --partial "[--strict]"
}

@test "2016 month gating: Jan–Jul skipped; Aug processed when manifest exists" {
  # Only August available
  export AVAILABLE_WARC="2016-08"
  export ZCAT_LINES=$'file1\nfile2\n'
  _run_script --year 2016 --output-prefix s3://dest/2016/ --daily-cap 5 --concurrency 1
  assert_success

  # Ensure no parse calls for months 01..07; but 08 present
  run grep -n "CC-NEWS/2016/08/warc.paths.gz" "$CALL_LOG"
  assert_success
  for m in 01 02 03 04 05 06 07; do
    run grep -n "CC-NEWS/2016/$m/warc.paths.gz" "$CALL_LOG"
    [ "$status" -ne 0 ]
  done

  # Ensure upload for Aug queue happened and payload was prefixed to s3://commoncrawl/
  run grep -n "UPLOAD s3://dest/2016/08/warc_queue.txt" "$UPLOAD_LOG"
  assert_success
  run grep -n "s3://commoncrawl/file1" "$UPLOAD_LOG"
  assert_success
  run grep -n "s3://commoncrawl/file2" "$UPLOAD_LOG"
  assert_success

  # Ensure sampler invoked for Aug with correct args
  run grep -n "python3 -u monthly_uniform_sampling.py dest 2016/08/warc_queue.txt 2016 08 5" "$CALL_LOG"
  assert_success
}

@test "STRICT=true: missing month manifest causes immediate die with curated message" {
  export AVAILABLE_WARC=""
  _run_script --year 2019 --output-prefix s3://out/2019/ --strict
  assert_failure
  # The first month is 01; message includes dash-padded month
  assert_equal "$stderr" "Data for 2019-01 is not available. Exiting."
}

@test "Non-strict: sampler failures increment FAILED and final exit code equals number of failed months" {
  export AVAILABLE_WARC="2019-01,2019-02,2019-03"
  export FAIL_MONTHS="02 03"
  _run_script --year 2019 --output-prefix s3://o/2019/ --daily-cap 7 --concurrency 3

  # 2 months failed → exit 2
  [ "$status" -eq 2 ]

  # Save the script's stdout BEFORE running another `run`, which would clobber $output.
  script_output="$output"

  # There should be 3 sampler invocations total
  run grep -c "python3 -u monthly_uniform_sampling.py" "$CALL_LOG"
  assert_output "3"

  # Confirm the non-strict continuation message appeared at least once
  [[ "$script_output" == *"enforce_daily_cap failed with exit code 1. Continuing."* ]]
}

@test "Default output-prefix used when not provided" {
  export AVAILABLE_WARC="2020-01"
  _run_script --year 2020 --daily-cap 5 --concurrency 1
  assert_success

  # Upload should target s3://news-archive/2020/01/warc_queue.txt
  run grep -n "UPLOAD s3://news-archive/2020/01/warc_queue.txt" "$UPLOAD_LOG"
  assert_success

  # Sampler should receive bucket/key derived from default prefix
  run grep -n "python3 -u monthly_uniform_sampling.py news-archive 2020/01/warc_queue.txt 2020 01 5" "$CALL_LOG"
  assert_success
}

@test "Unknown flag errors out early" {
  _run_script --wat
  assert_failure
  # The script prints this on stdout then exits 1
  assert_equal "$output" "Unknown parameter: --wat"
}
